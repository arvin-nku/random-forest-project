% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greedy_algorithm.R
\name{greedy_cart_regression}
\alias{greedy_cart_regression}
\title{Greedy Algorithm (Regression)}
\usage{
greedy_cart_regression(
  data,
  num_leaf = NULL,
  depth = NULL,
  num_split = 2,
  min_num = 1,
  m = 0
)
}
\arguments{
\item{data}{A named list containing regression data. The x values have the name `x` and are in the form of a matrix where the row number gives the dimension of the data. The y values have the name `y` and are in the form of a vector.}

\item{num_leaf}{Condition to end: the tree has `num_leaf` leaves. Must be greater than or equal to 1. The default value is the maximum number of leaves (the number of data points).}

\item{depth}{Condition to end: the tree has depth `depth`. Must be greater than or equal to 0. The default value is the maximum achievable depth.}

\item{num_split}{Split only nodes which contain at least `num_split` elements. Must be greater than or equal to 2.}

\item{min_num}{Only split a node if both child nodes have at least `min_num` elements. Must be greater than or equal to 1.}

\item{m}{Parameter for Random Forest algorithm: positive number of coordinates used in each iteration. The default value is the dimension of the data.}
}
\value{
An environment containing the elements `dim`, `values`, and `tree`. 
\itemize{
  \item `dim`: The dimension of the data.
  \item `values`: Data in a tibble format.
  \item `tree`: Decision tree in the form of a tibble. It has the following columns:
    \itemize{
      \item `node`: Node identifier, where node n has child nodes 2n and 2n + 1.
      \item `name`: Type of the node (root, inner node, leaf).
      \item `split_index`: Index at which data is split.
      \item `split_point`: Value at which data is split.
      \item `y`: y values of data contained in this node.
      \item `A`: x values of data contained in this node.
      \item `c_value`: The approximate value for the data elements in a node.
    }
}
}
\description{
Greedy algorithm for regression data.
This function builds a regression tree using a greedy algorithm based on minimizing squared error.
}
\examples{
X <- runif(100,0,1)
e <- rnorm(100,0,0.2)
Y <- sin(2*pi*X) + e
data <- list(x = matrix(X, nrow = 1), y = Y)
val <- greedy_cart_regression(data, depth = 3)
val$values
val$tree
}
